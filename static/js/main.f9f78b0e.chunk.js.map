{"version":3,"sources":["AppHeader/AppHeader.style.js","AppHeader/AppHeader.js","SearchSelect/SearchSelect.style.js","SearchSelect/languagesData.js","SearchSelect/SearchSelect.js","RepoList/RepoListItem/RepoListItem.style.js","RepoList/RepoListItem/RepoListItem.js","RepoList/RepoList.style.js","RepoList/RepoList.js","App.style.js","App.js","serviceWorker.js","index.js"],"names":["appHeaderStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","sectionDesktop","breakpoints","up","sectionMobile","AppHeader","classes","AppBar","position","Toolbar","Typography","className","variant","noWrap","IconButton","edge","aria-label","href","color","searchSelectStyles","formControl","marginBottom","width","availableLanguages","value","label","SearchSelect","props","context","languageSelected","onSelect","FormControl","InputLabel","id","Select","labelId","onChange","event","map","languageInfo","MenuItem","key","FormHelperText","repoListItemStyles","card","margin","cardActionArea","height","RepoListItem","repository","Card","CardActionArea","html_url","CardHeader","avatar","Avatar","src","owner","avatar_url","name","subheader","login","CardContent","component","description","CardActions","disableSpacing","Button","button","startIcon","stargazers_url","stargazers_count","forks_url","forks","repoListStyles","container","flexDirection","flexWrap","justifyContent","marginTop","loading","RepoList","repositories","length","gutterBottom","LinearProgress","appStyles","app","alignItems","mainContainer","overflow","padding","App","useState","setLanguageSelected","searchResults","setSearchResults","isLoading","setIsLoading","hasMoreResults","setHasMoreResults","pageNumber","setPageNumber","scroller","setScroller","searchLanguageRepos","a","url","axios","result","concat","data","items","total_count","useEffect","onScroll","clientHeight","scrollTop","scrollHeight","ref","langOption","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9f78b0e.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport const appHeaderStyles = makeStyles(theme => ({\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      display: 'block'\n    },\n    sectionDesktop: {\n      display: 'none',\n      [theme.breakpoints.up('md')]: {\n        display: 'flex',\n      },\n    },\n    sectionMobile: {\n      display: 'flex',\n      [theme.breakpoints.up('md')]: {\n        display: 'none',\n      },\n    },\n  })\n);","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { appHeaderStyles } from './AppHeader.style';\n\nexport default function AppHeader() {\n  const classes = appHeaderStyles();\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Github Repo Search\n          </Typography>\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"repo link\"\n              href=\"https://github.com/marciogurka/github-repo-language-search\"\n              color=\"inherit\"\n            >\n              <GitHubIcon />\n            </IconButton>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"repo link\"\n              href=\"https://github.com/marciogurka/github-repo-language-search\"\n              color=\"inherit\"\n            >\n              <GitHubIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport const searchSelectStyles = makeStyles(theme => ({\n    formControl: {\n      marginBottom: 32,\n      width: '100%'\n    }\n  })\n);","export const availableLanguages = [\n    {\n        value: '',\n        label: 'None'\n    },\n    {\n      value: 'C',\n      label: 'C'\n    },\n    {\n      value: 'C++',\n      label: 'C++'\n    },\n    {\n      value: 'C#',\n      label: 'C#'\n    },\n    {\n      value: 'Java',\n      label: 'Java'\n    },\n    {\n      value: 'JavaScript',\n      label: 'JavaScript'\n    },\n    {\n      value: 'Python',\n      label: 'Python'\n    },\n    {\n      value: 'Ruby',\n      label: 'Ruby'\n    }\n  ];","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { searchSelectStyles } from './SearchSelect.style';\nimport { availableLanguages } from './languagesData';\n\nexport default function SearchSelect(props, context) {\n  const classes = searchSelectStyles();\n  const { languageSelected, onSelect } = props;\n\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel id=\"language-select\">Please select your language</InputLabel>\n      <Select\n        labelId=\"language-select\"\n        id=\"language-select\"\n        value={ languageSelected }\n        onChange={ event => onSelect(event) }\n      >\n        {\n          availableLanguages.map(languageInfo => {\n            return (\n              <MenuItem key={languageInfo.value} value={languageInfo.value}>\n                {languageInfo.label}\n              </MenuItem>\n            );\n          })\n        }\n      </Select>\n      <FormHelperText>After you select one available language the search will start automatically</FormHelperText>\n    </FormControl>\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport const repoListItemStyles = makeStyles(theme => ({\n    card: {\n      flexGrow: 1,\n      margin: 10, \n      width: 300,\n    },\n    cardActionArea: {\n      height: 'calc(100% - 52px)'\n    }\n  })\n);","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { repoListItemStyles } from './RepoListItem.style';\n\n/**\n * @name RepoListItem\n * @description The repository item component\n * @author Márcio José Gurka Júnior <marciogurkajr@gmail.com>\n */\nfunction RepoListItem(props, context) {\n  const classes = repoListItemStyles();\n  const { repository } = props;\n  return (\n    repository && <Card className={classes.card}>\n        <CardActionArea href={repository.html_url} className={classes.cardActionArea}>\n          <CardHeader\n            avatar={\n              <Avatar src={repository.owner.avatar_url} className={classes.avatar}></Avatar>\n            }\n            title={repository.name}\n            subheader={repository.owner.login}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {repository.description}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions disableSpacing>\n            <Button\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<FavoriteIcon />}\n              href={repository.stargazers_url}\n            >\n              {repository.stargazers_count}\n            </Button>\n            <Button\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<ShareIcon />}\n              href={repository.forks_url}\n            >\n              {repository.forks}\n            </Button>\n        </CardActions>\n      </Card>\n  );\n}\n\nexport default RepoListItem;","import { makeStyles } from '@material-ui/core/styles';\n\nexport const repoListStyles = makeStyles(theme => ({\n    container: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-evenly',\n      marginTop: 16,\n      width: '100%'\n    },\n    loading: {\n      marginBottom: 16,\n      marginTop: 16,\n      width: '100%'\n    }\n  })\n);","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport RepoListItem from './RepoListItem/RepoListItem';\nimport { repoListStyles } from './RepoList.style';\n\n/**\n * @name RepoList\n * @description The repositories list container component\n * @author Márcio José Gurka Júnior <marciogurkajr@gmail.com>\n */\nfunction RepoList(props, context) {\n  const classes = repoListStyles();\n  const { repositories, loading } = props;\n  return (\n    <div className={classes.container}>\n    {\n      ((!repositories || (repositories && repositories.length === 0)) && !loading && (<Typography variant=\"body1\" gutterBottom>Choose a programming language to check the most starred repositories of that language</Typography>))\n    }\n    {\n      repositories && repositories.length > 0 ? \n        repositories.map(repository => {\n          return (<RepoListItem key={repository.id} repository={repository}/>)\n        })\n      : null\n    }\n    { loading && <LinearProgress className={classes.loading} variant=\"query\" /> }\n    </div>\n  );\n}\n\nexport default RepoList;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const appStyles = makeStyles(theme => ({\n    app: {\n      alignItems: 'stretch',\n      display: 'flex',\n      height: '100vh',\n      flexDirection: 'column'\n    },\n    mainContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      justifyContent: 'flex-start',\n      overflow: 'scroll',\n      padding: '3em 2em'\n    }\n  })\n);","import React, { useState, useEffect } from 'react';\nimport AppHeader from './AppHeader/AppHeader';\nimport SearchSelect from './SearchSelect/SearchSelect';\nimport RepoList from './RepoList/RepoList';\nimport Typography from '@material-ui/core/Typography';\nimport { appStyles } from './App.style';\nimport axios from 'axios';\n\n\n/**\n * @name App\n * @description The app main component\n * @author Márcio José Gurka Júnior <marciogurkajr@gmail.com>\n */\nfunction App() {\n  const classes = appStyles();\n  const [languageSelected, setLanguageSelected] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasMoreResults, setHasMoreResults] = useState(true);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [scroller, setScroller] = useState(null);\n\n  /**\n * @name onSelectLanguage\n * @description Function that sets the selected language and calls the Github API function\n * @param value - The language option selected\n * @author Márcio José Gurka Júnior <marciogurkajr@gmail.com>\n */\n  const onSelectLanguage = (langOption) => {\n    if(langOption !== languageSelected) {\n      setSearchResults([])\n      setPageNumber(1)\n    }\n    setLanguageSelected(langOption);\n  }\n\n  /**\n * @name searchLanguageRepos\n * @description Function that realizes the API call and updates the results\n * @param value - The language option selected\n * @author Márcio José Gurka Júnior <marciogurkajr@gmail.com>\n */\n  const searchLanguageRepos = async () => {\n    let url = `https://api.github.com/search/repositories?q=language:${languageSelected}&sort=stars&page=${pageNumber}`;\n    if(!isLoading && hasMoreResults) {\n      setIsLoading(true);\n      try {\n        const result = await axios(url);\n        setSearchResults(searchResults.concat(result.data.items));\n        setIsLoading(false);\n        if (result.data.total_count === searchResults.length)\n          setHasMoreResults(false);\n      } catch (error) {\n        setIsLoading(true);\n      }\n    }\n  }\n\n  const handleScroll = () => {\n    if(scroller && ((scroller.clientHeight + scroller.scrollTop) > scroller.scrollHeight - 200)) {\n      setPageNumber(pageNumber + 1)\n    }\n  }\n\n  useEffect(() => {\n    if(languageSelected) \n      searchLanguageRepos();\n  }, [languageSelected, pageNumber]);\n\n  return (\n    <div className={classes.app}>\n      <AppHeader/>\n      <main className={classes.mainContainer} onScroll={handleScroll} ref={(scroller) => setScroller(scroller)}>\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Github Repo Search\n        </Typography>\n        <SearchSelect languageSelected={languageSelected} onSelect={event => onSelectLanguage(event.target.value)}/>\n        { languageSelected && <Typography variant=\"h5\" component=\"h4\"> Results for \"<Typography id=\"searched-language\" variant=\"h5\" component=\"span\">{ languageSelected }</Typography>\": </Typography> }\n        <RepoList repositories={searchResults} loading={isLoading}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}